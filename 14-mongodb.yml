---
- name: Install MongoDB
  hosts: ovh_manager
  become: true
  vars_files:
    - ./vars/mongodb.yml
  pre_tasks:
    - name: Install Docker Python SDK
      ansible.builtin.apt:
        name:
          - python3-docker
          - python3-pip
          - python3-jsondiff
        state: present
      tags:
        - docker
        - mongodb

    - name: MongoDB repo
      tags:
        - mongodb
      block:
        - name: Check if signing key is present
          ansible.builtin.stat:
            path: /etc/apt/keyrings/mongodb-server-8.0.gpg
          register: mongodb_st_key

        - name: Import MongoDB GPG key
          ansible.builtin.shell: |
            curl -fsSL https://www.mongodb.org/static/pgp/server-8.0.asc | \
            gpg --dearmor -o /etc/apt/keyrings/mongodb-server-8.0.gpg
          when: not mongodb_st_key.stat.exists

        - name: Set MongoDB compatible Ubuntu version
          ansible.builtin.set_fact:
            mongodb_ubuntu_codename: >-
              {%- if ansible_distribution_release in ['plucky', 'oracular'] -%}
              noble
              {%- elif ansible_distribution_release == 'mantic' -%}
              jammy
              {%- else -%}
              {{ ansible_distribution_release }}
              {%- endif -%}

        - name: Display MongoDB repository version
          ansible.builtin.debug:
            msg: "Using MongoDB 8.0 repo for Ubuntu {{ mongodb_ubuntu_codename }} (detected: {{ ansible_distribution_release }})"

        - name: Add MongoDB repository into sources list
          ansible.builtin.apt_repository:
            repo: "deb [ arch=amd64,arm64 signed-by=/etc/apt/keyrings/mongodb-server-8.0.gpg ] https://repo.mongodb.org/apt/ubuntu {{ mongodb_ubuntu_codename }}/mongodb-org/8.0 multiverse"
            state: present
            filename: mongodb-org-8.0

        - name: Update cache
          ansible.builtin.apt:
            update_cache: true

  tasks:
    - name: Install MongoDB packages
      ansible.builtin.apt:
        name:
          - mongodb-org
          - mongodb-mongosh
        state: present
      tags:
        - mongodb

    - name: Ensure MongoDB data directory exists
      ansible.builtin.file:
        path: /var/lib/mongodb
        state: directory
        owner: mongodb
        group: mongodb
        mode: "0755"
      tags:
        - mongodb

    - name: Check if authentication is already configured
      ansible.builtin.lineinfile:
        path: /etc/mongod.conf
        regexp: "^security:"
        state: absent
      check_mode: true
      register: auth_configured
      tags:
        - mongodb

    - name: Temporarily disable authentication if enabled
      ansible.builtin.replace:
        path: /etc/mongod.conf
        regexp: '^(security:)$'
        replace: '#\1'
      when: auth_configured.changed
      notify: restart mongodb for user creation
      tags:
        - mongodb

    - name: Also comment authorization line
      ansible.builtin.replace:
        path: /etc/mongod.conf
        regexp: '^(\s+authorization:.*)$'
        replace: '#\1'
      when: auth_configured.changed
      notify: restart mongodb for user creation
      tags:
        - mongodb

    - name: Flush handlers to restart MongoDB without auth
      meta: flush_handlers
      tags:
        - mongodb

    - name: Ensure MongoDB is started
      ansible.builtin.service:
        name: mongod
        state: started
        enabled: true
      tags:
        - mongodb

    - name: Wait for MongoDB to be ready
      ansible.builtin.wait_for:
        port: 27017
        delay: 3
        timeout: 30
      tags:
        - mongodb

    - name: Check if admin user already exists
      ansible.builtin.command: |
        mongosh --quiet --eval "try { db.getSiblingDB('admin').getUser('{{ mongodb_admin_user }}') } catch(e) { print('null') }"
      register: admin_user_check
      failed_when: false
      changed_when: false
      tags:
        - mongodb

    - name: Display user check result
      ansible.builtin.debug:
        msg: "Admin user exists: {{ 'Yes' if admin_user_check.stdout and 'null' not in admin_user_check.stdout else 'No' }}"
      tags:
        - mongodb

    - name: Create MongoDB admin user
      ansible.builtin.command: |
        mongosh --eval "
        db.getSiblingDB('admin').createUser({
          user: '{{ mongodb_admin_user }}',
          pwd: '{{ mongodb_admin_password }}',
          roles: [
            { role: 'userAdminAnyDatabase', db: 'admin' },
            { role: 'readWriteAnyDatabase', db: 'admin' },
            { role: 'dbAdminAnyDatabase', db: 'admin' }
          ]
        })
        "
      when: admin_user_check.stdout is not defined or 'null' in admin_user_check.stdout or admin_user_check.stdout == ''
      register: create_admin_result
      # no_log: true
      tags:
        - mongodb

    - name: Create application database and user
      ansible.builtin.command: |
        mongosh -u '{{ mongodb_admin_user }}' -p '{{ mongodb_admin_password }}' --authenticationDatabase admin --eval "
        db.getSiblingDB('{{ mongodb_app_database }}').createUser({
          user: '{{ mongodb_app_user }}',
          pwd: '{{ mongodb_app_password }}',
          roles: [
            { role: 'readWrite', db: '{{ mongodb_app_database }}' }
          ]
        })
        "
      when: create_admin_result is changed
      # no_log: true
      tags:
        - mongodb

    - name: Configure MongoDB to listen on all interfaces
      ansible.builtin.lineinfile:
        path: /etc/mongod.conf
        regexp: "^  bindIp:"
        line: "  bindIp: 0.0.0.0"
        state: present
      notify: restart mongodb
      tags:
        - mongodb

    - name: Enable authentication in MongoDB
      ansible.builtin.blockinfile:
        path: /etc/mongod.conf
        marker: "# {mark} ANSIBLE MANAGED BLOCK - Security"
        block: |
          security:
            authorization: enabled
        insertafter: "^#?security:"
      notify: restart mongodb
      tags:
        - mongodb

    - name: Allow port MongoDB
      community.general.ufw:
        rule: allow
        port: "27017"
        proto: tcp
        direction: in
        interface: "{{ item.interface | default(omit) }}"
        from_ip: "{{ item.from_ip | default('any') }}"
        comment: "{{ item.comment }}"
      loop:
        - from_ip: "{{ ansible_docker0.ipv4.address }}/{{ ansible_docker0.ipv4.prefix }}"
          interface: docker0
          comment: "allow MongoDB connection from Docker"
        - from_ip: "{{ ansible_docker_gwbridge.ipv4.address }}/{{ ansible_docker_gwbridge.ipv4.prefix }}"
          interface: docker_gwbridge
          comment: "allow MongoDB connection from docker_gwbridge"
      tags:
        - ufw

  handlers:
    - name: restart mongodb for user creation
      ansible.builtin.service:
        name: mongod
        state: restarted

    - name: restart mongodb
      ansible.builtin.service:
        name: mongod
        state: restarted

  post_tasks:
    - name: Verify MongoDB is running with authentication
      ansible.builtin.command: |
        mongosh -u '{{ mongodb_admin_user }}' -p '{{ mongodb_admin_password }}' --authenticationDatabase admin --eval "db.runCommand({connectionStatus: 1})"
      register: mongo_status
      changed_when: false
      tags:
        - mongodb
        - verify

    - name: Display MongoDB status
      ansible.builtin.debug:
        msg: "MongoDB is running and authentication is working!"
      when: mongo_status.rc == 0
      tags:
        - mongodb
        - verify

- name: Install Mongo Express (MongoDB Web UI)
  hosts: ovh_manager
  become: true
  vars_files:
    - ./vars/mongodb.yml
  pre_tasks:
    - name: Ensure internal apps folder exists
      ansible.builtin.file:
        path: "{{ internal_apps_folder }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      tags:
        - mongo-express

    - name: Ensure secret for mongo-express basic auth is present
      community.docker.docker_secret:
        name: "{{ mongo_express_basicauth_username_secret_name }}"
        data: "{{ mongo_express_basicauth_username }}"
        state: present
      tags:
        - mongo-express

    - name: Ensure secret for mongo-express basic auth password is present
      community.docker.docker_secret:
        name: "{{ mongo_express_basicauth_password_secret_name }}"
        data: "{{ mongo_express_basicauth_password }}"
        state: present
      tags:
        - mongo-express

    - name: Ensure secret for MongoDB admin password is present
      community.docker.docker_secret:
        name: "{{ mongodb_admin_password_secret_name }}"
        data: "{{ mongodb_admin_password }}"
        state: present
      tags:
        - mongo-express

  roles:
    - role: deploy-swarm-stack
      deploy_swarm_stack_name: mongo-express
      deploy_swarm_stack_template_name: mongo-express.yml
      deploy_swarm_stack_dest_folder: "{{ internal_apps_folder }}"
      tags:
        - mongo-express

  tasks:
    - name: Check if we can access the service
      ansible.builtin.uri:
        url: "http://{{ mongo_express_domain }}"
        follow_redirects: safe
        return_content: true
        force_basic_auth: true
        url_username: "{{ mongo_express_basicauth_username }}"
        url_password: "{{ mongo_express_basicauth_password }}"
      register: this
      failed_when: "'Mongo Express' not in this.content or this.status != 200 or 'https://' not in this.url"
      retries: 5
      delay: 10
      until: this.status == 200
      tags:
        - mongo-express